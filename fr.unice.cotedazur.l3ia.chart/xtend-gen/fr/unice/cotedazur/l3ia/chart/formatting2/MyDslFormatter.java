/**
 * generated by Xtext 2.25.0
 */
package fr.unice.cotedazur.l3ia.chart.formatting2;

import com.google.inject.Inject;
import fr.unice.cotedazur.l3ia.chart.services.MyDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import tpNote.File;
import tpNote.HTMLFile;
import tpNote.Programme;
import tpNote.extractedData;
import tpNote.filterCondition;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final Programme programme, @Extension final IFormattableDocument document) {
    document.<File>format(programme.getInput());
    document.<HTMLFile>format(programme.getOutput());
    EList<filterCondition> _filtercondition = programme.getFiltercondition();
    for (final filterCondition filterCondition : _filtercondition) {
      document.<tpNote.filterCondition>format(filterCondition);
    }
  }
  
  protected void _format(final File file, @Extension final IFormattableDocument document) {
    EList<extractedData> _keep = file.getKeep();
    for (final extractedData extractedData : _keep) {
      document.<tpNote.extractedData>format(extractedData);
    }
  }
  
  public void format(final Object file, final IFormattableDocument document) {
    if (file instanceof XtextResource) {
      _format((XtextResource)file, document);
      return;
    } else if (file instanceof File) {
      _format((File)file, document);
      return;
    } else if (file instanceof Programme) {
      _format((Programme)file, document);
      return;
    } else if (file instanceof EObject) {
      _format((EObject)file, document);
      return;
    } else if (file == null) {
      _format((Void)null, document);
      return;
    } else if (file != null) {
      _format(file, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(file, document).toString());
    }
  }
}

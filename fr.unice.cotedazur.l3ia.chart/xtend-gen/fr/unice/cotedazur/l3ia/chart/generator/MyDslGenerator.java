/**
 * generated by Xtext 2.25.0
 */
package fr.unice.cotedazur.l3ia.chart.generator;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import tpNote.Graph;
import tpNote.Programme;
import tpNote.extractedData;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
      Programme program = ((Programme) _head);
      String path = program.getInput().getPath();
      String delimiteur = program.getInput().getDelimiter();
      List<String> fileContent = new ArrayList<String>();
      try (BufferedReader br = new Function0<BufferedReader>() {
        @Override
        public BufferedReader apply() {
          try {
            FileReader _fileReader = new FileReader(path);
            return new BufferedReader(_fileReader);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        }
      }.apply()) {
        String line = br.readLine();
        while ((line != null)) {
          {
            fileContent.add(line);
            line = br.readLine();
          }
        }
      }
      EList<extractedData> keep = program.getInput().getKeep();
      StringBuilder data = new StringBuilder();
      data.append("const data = [\n");
      String test = "";
      List<String> colTypes = (List<String>)Conversions.doWrapArray(fileContent.get(1).split(delimiteur));
      int size = colTypes.size();
      for (int i = 2; (i < fileContent.size()); i++) {
        {
          String[] line = fileContent.get(i).split(delimiteur);
          final String[] _converted_line = (String[])line;
          int _size = ((List<String>)Conversions.doWrapArray(_converted_line)).size();
          boolean _tripleEquals = (_size == size);
          if (_tripleEquals) {
            StringBuilder jsonLine = new StringBuilder("{ ");
            int hasEmptyString = 0;
            for (int j = 0; (j < keep.size()); j++) {
              {
                int index = keep.get(j).getIndex();
                String colName = keep.get(j).getName();
                jsonLine.append(colName);
                jsonLine.append(": ");
                boolean _isEmpty = (line[index]).isEmpty();
                if (_isEmpty) {
                  int _hasEmptyString = hasEmptyString;
                  hasEmptyString = (_hasEmptyString + 1);
                }
                if (((colTypes.get(index).equals("String") || colTypes.get(index).equals("STRING")) || colTypes.get(index).equals("string"))) {
                  jsonLine.append("\"");
                  jsonLine.append(line[index]);
                  jsonLine.append("\"");
                } else {
                  jsonLine.append(line[index]);
                }
                int _size_1 = keep.size();
                int _minus = (_size_1 - 1);
                boolean _tripleNotEquals = (j != _minus);
                if (_tripleNotEquals) {
                  jsonLine.append(" , ");
                }
              }
            }
            jsonLine.append("}");
            if ((hasEmptyString == 0)) {
              data.append(jsonLine);
              int _size_1 = fileContent.size();
              int _minus = (_size_1 - 1);
              boolean _tripleNotEquals = (i != _minus);
              if (_tripleNotEquals) {
                data.append(" , ");
              }
              data.append("\n");
            }
          }
        }
      }
      data.append("]");
      Map<String, String> chartTypes = new HashMap<String, String>();
      chartTypes.put("BarChart", "bar");
      chartTypes.put("AreaChart", "area");
      chartTypes.put("BubbleChart", "bubble");
      chartTypes.put("LineChart", "line");
      chartTypes.put("ScatterChart", "scatter");
      chartTypes.put("MixedChartTypes", "mixed");
      chartTypes.put("RadarChart", "radar");
      chartTypes.put("Pie", "pie");
      chartTypes.put("Doughnut", "doughnut");
      List<String> keys = new ArrayList<String>();
      EList<Graph> graphes = program.getOutput().getGraph();
      Graph graph = graphes.get(0);
      String type = graph.getType().getName();
      String title = graph.getTitle();
      String xAxis = graph.getXAxis().getName();
      EList<extractedData> yAxis = graph.getYAxis();
      for (final extractedData e : yAxis) {
        keys.add(e.getName());
      }
      StringBuilder graphGenerate = new StringBuilder();
      graphGenerate.append("\n new Chart( \n");
      graphGenerate.append("document.getElementById(\'myChart\'),");
      graphGenerate.append("{\n");
      graphGenerate.append("type : ");
      graphGenerate.append("\'").append(chartTypes.get(type)).append("\'");
      graphGenerate.append(", \n");
      graphGenerate.append("data: { \n labels : ");
      graphGenerate.append("data.map(row => row.");
      graphGenerate.append(xAxis);
      graphGenerate.append("), \n");
      graphGenerate.append("datasets: [");
      for (int i = 0; (i < keys.size()); i++) {
        {
          StringBuilder row = new StringBuilder("{ \n");
          row.append("label : ");
          row.append("\'").append(keys.get(i)).append("\'");
          row.append(", \n");
          row.append("data: ").append("data.map(row => row.").append(keys.get(i));
          row.append(" )");
          row.append("} \n");
          int _size = keys.size();
          int _minus = (_size - 1);
          boolean _tripleNotEquals = (i != _minus);
          if (_tripleNotEquals) {
            row.append(", \n");
          }
          graphGenerate.append(row);
        }
      }
      graphGenerate.append("]");
      graphGenerate.append("}\r\n\t\t\t    }\r\n\t\t\t  );\r\n\t\t\t");
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<!DOCTYPE html>");
      _builder.newLine();
      _builder.append("<head>");
      _builder.newLine();
      _builder.append("</head>");
      _builder.newLine();
      _builder.append("<body>");
      _builder.newLine();
      _builder.append("<div>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("<canvas id=\"myChart\"></canvas>");
      _builder.newLine();
      _builder.append("</div>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>");
      _builder.newLine();
      _builder.append("<!-- <script src=\"https://raw.githubusercontent.com/chartjs/Chart.js/master/docs/scripts/utils.js\"></script> -->");
      _builder.newLine();
      _builder.newLine();
      _builder.append("<script>");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append(" ");
      _builder.append("const CHART_COLORS = {");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("redt: \'rgba(255, 99, 132, 0.6)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("red: \'rgb(255, 99, 132)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("orange: \'rgb(255, 159, 64)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("yellow: \'rgb(255, 205, 86)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("green: \'rgb(75, 192, 192)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("bluet: \'rgba(54, 162, 235, 0.6)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("blue: \'rgb(54, 162, 235)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("purple: \'rgb(153, 102, 255)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("grey: \'rgb(201, 203, 207)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("black: \'rgb(0, 0, 0)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("white: \'rgb(255, 255, 255)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("pink: \'rgb(255, 192, 203)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("brown: \'rgb(165, 42, 42)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("gold: \'rgb(255, 215, 0)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("silver: \'rgb(192, 192, 192)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("navy: \'rgb(0, 0, 128)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("teal: \'rgb(0, 128, 128)\',");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("olive: \'rgb(128, 128, 0)\'");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("};");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("const NAMED_COLORS = [");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.red,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.orange,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.yellow,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.green,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.blue,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.purple,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.grey,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.black,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.white,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.pink,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.brown,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.gold,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.silver,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.navy,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.teal,");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("CHART_COLORS.olive");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("];");
      _builder.newLine();
      String _plus = (_builder.toString() + data);
      String _plus_1 = (_plus + graphGenerate);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("</script> ");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("</body>");
      _builder_1.newLine();
      String html = (_plus_1 + _builder_1);
      fsa.generateFile("programme.html", data);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}

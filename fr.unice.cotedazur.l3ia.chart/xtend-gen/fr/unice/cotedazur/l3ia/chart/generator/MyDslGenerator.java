/**
 * generated by Xtext 2.25.0
 */
package fr.unice.cotedazur.l3ia.chart.generator;

import com.google.common.base.Objects;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import tpNote.BinaryBooleanExp;
import tpNote.Constant;
import tpNote.Graph;
import tpNote.Programme;
import tpNote.colRef;
import tpNote.extractedData;
import tpNote.filterCondition;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  public boolean isNumericType(final String type) {
    return ((((type.equals("DOUBLE") || type.equals("FLOAT")) || type.equals("INT")) || type.equals("long")) || type.equals("short"));
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
      Programme program = ((Programme) _head);
      String path = program.getInput().getPath();
      String delimiteur = program.getInput().getDelimiter();
      List<String> fileContent = new ArrayList<String>();
      try (BufferedReader br = new Function0<BufferedReader>() {
        @Override
        public BufferedReader apply() {
          try {
            FileReader _fileReader = new FileReader(path);
            return new BufferedReader(_fileReader);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        }
      }.apply()) {
        String line = br.readLine();
        while ((line != null)) {
          {
            fileContent.add(line);
            line = br.readLine();
          }
        }
      }
      EList<extractedData> keep = program.getInput().getKeep();
      StringBuilder data = new StringBuilder();
      data.append("const data = [\n");
      String test = "";
      List<String> colTypes = (List<String>)Conversions.doWrapArray(fileContent.get(1).split(delimiteur));
      int size = colTypes.size();
      for (int i = 2; (i < fileContent.size()); i++) {
        {
          String[] line = fileContent.get(i).split(delimiteur);
          final String[] _converted_line = (String[])line;
          int _size = ((List<String>)Conversions.doWrapArray(_converted_line)).size();
          boolean _tripleEquals = (_size == size);
          if (_tripleEquals) {
            StringBuilder jsonLine = new StringBuilder("{ ");
            int hasEmptyString = 0;
            for (int j = 0; (j < keep.size()); j++) {
              {
                int index = keep.get(j).getIndex();
                String colName = keep.get(j).getName();
                jsonLine.append(colName);
                jsonLine.append(": ");
                boolean _isEmpty = (line[index]).isEmpty();
                if (_isEmpty) {
                  int _hasEmptyString = hasEmptyString;
                  hasEmptyString = (_hasEmptyString + 1);
                }
                if ((((colTypes.get(index).equals("String") || colTypes.get(index).equals("STRING")) || colTypes.get(index).equals("string")) || colTypes.get(index).equals("CAT"))) {
                  jsonLine.append("\"");
                  jsonLine.append(line[index]);
                  jsonLine.append("\"");
                } else {
                  jsonLine.append(line[index]);
                }
                int _size_1 = keep.size();
                int _minus = (_size_1 - 1);
                boolean _tripleNotEquals = (j != _minus);
                if (_tripleNotEquals) {
                  jsonLine.append(" , ");
                }
              }
            }
            jsonLine.append("}");
            if ((hasEmptyString == 0)) {
              data.append(jsonLine);
              int _size_1 = fileContent.size();
              int _minus = (_size_1 - 1);
              boolean _tripleNotEquals = (i != _minus);
              if (_tripleNotEquals) {
                data.append(" , ");
              }
              data.append("\n");
            }
          }
        }
      }
      data.append("]");
      Map<String, String> operateurs = new HashMap<String, String>();
      operateurs.put("inf", "<");
      operateurs.put("sup", ">");
      operateurs.put("equal", "===");
      List<String> filterCondtions = new ArrayList<String>();
      for (int k = 0; (k < program.getFiltercondition().size()); k++) {
        {
          StringBuilder s = new StringBuilder();
          filterCondition _get = program.getFiltercondition().get(k);
          BinaryBooleanExp booleanExp = ((BinaryBooleanExp) _get);
          filterCondition _lhs = booleanExp.getLhs();
          colRef col = ((colRef) _lhs);
          filterCondition _rhs = booleanExp.getRhs();
          Constant constant = ((Constant) _rhs);
          String _name = col.getExtracteddata().getName();
          String _plus = ("item." + _name);
          s.append(_plus).append(" ");
          final String op = booleanExp.getOperator().getName();
          s.append(operateurs.get(op)).append(" ");
          boolean _equals = constant.getType().getName().equals("string");
          if (_equals) {
            String _value = constant.getValue();
            String _plus_1 = ("\"" + _value);
            String _plus_2 = (_plus_1 + "\"");
            s.append(_plus_2).append(" ");
          } else {
            s.append(constant.getValue());
          }
          filterCondtions.add(s.toString());
        }
      }
      StringBuilder dataFilter = new StringBuilder();
      int _size = program.getFiltercondition().size();
      boolean hasFilter = (_size > 0);
      int _size_1 = program.getFiltercondition().size();
      boolean _greaterThan = (_size_1 > 0);
      if (_greaterThan) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("const filteredData = data.filter(item => {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("if (");
        String _join = IterableExtensions.join(filterCondtions, " && ");
        _builder.append(_join, "\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("return item");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("})");
        _builder.newLine();
        dataFilter.append(_builder);
      }
      Map<String, String> chartTypes = new HashMap<String, String>();
      ArrayList<String> graphiquesNum = CollectionLiterals.<String>newArrayList();
      ArrayList<String> graphiquesCat = CollectionLiterals.<String>newArrayList();
      graphiquesNum.addAll(CollectionLiterals.<String>newArrayList("BubbleChart", "ScatterChart"));
      graphiquesCat.addAll(CollectionLiterals.<String>newArrayList("PolarAreaChart", "LineChart", "BarChart", "AreaChart", "BubbleChart", "MixedChartTypes", "RadarChart", "Pie", "Doughnut"));
      boolean allNumeric = true;
      for (int j = 0; (j < keep.size()); j++) {
        {
          int index = keep.get(j).getIndex();
          boolean _isNumericType = this.isNumericType(colTypes.get(index));
          boolean _not = (!_isNumericType);
          if (_not) {
            allNumeric = false;
          }
        }
      }
      if (allNumeric) {
        chartTypes.put("ScatterChart", "scatter");
        chartTypes.put("BubbleChart", "bubble");
      } else {
        chartTypes.put("LineChart", "line");
        chartTypes.put("AreaChart", "area");
        chartTypes.put("PolarAreaChart", "polarArea");
        chartTypes.put("MixedChartTypes", "mixed");
        chartTypes.put("RadarChart", "radar");
        chartTypes.put("Pie", "pie");
        chartTypes.put("Doughnut", "doughnut");
        chartTypes.put("BarChart", "bar");
      }
      List<String> keys = new ArrayList<String>();
      EList<Graph> graphes = program.getOutput().getGraph();
      Graph graph = graphes.get(0);
      String type = graph.getType().getName();
      String title = graph.getTitle();
      String xAxis = graph.getXAxis().getName();
      EList<extractedData> yAxis = graph.getYAxis();
      for (final extractedData e : yAxis) {
        keys.add(e.getName());
      }
      StringBuilder graphGenerate = new StringBuilder();
      graphGenerate.append("\n new Chart( \n");
      graphGenerate.append("document.getElementById(\'myChart\'),");
      graphGenerate.append("{\n");
      graphGenerate.append("type : ");
      graphGenerate.append("\'").append(chartTypes.get(type)).append("\'");
      graphGenerate.append(", \n");
      graphGenerate.append("data: { \n labels : ");
      String _xifexpression = null;
      if (hasFilter) {
        _xifexpression = "filteredData";
      } else {
        _xifexpression = "data";
      }
      graphGenerate.append(_xifexpression);
      graphGenerate.append(".map(row => row.");
      graphGenerate.append(xAxis);
      graphGenerate.append("), \n");
      graphGenerate.append("datasets: [");
      for (int i = 0; (i < keys.size()); i++) {
        {
          StringBuilder row = new StringBuilder("{ \n");
          row.append("label : ");
          row.append("\'").append(keys.get(i)).append("\'");
          row.append(", \n");
          row.append("data: ");
          String _xifexpression_1 = null;
          if (hasFilter) {
            _xifexpression_1 = "filteredData";
          } else {
            _xifexpression_1 = "data";
          }
          row.append(_xifexpression_1);
          row.append(".map(row => row.").append(keys.get(i));
          row.append(" )");
          row.append(" \n");
          int _size_2 = keys.size();
          int _minus = (_size_2 - 1);
          boolean _tripleNotEquals = (i != _minus);
          if (_tripleNotEquals) {
            row.append("} ,\n");
          }
          graphGenerate.append(row);
        }
      }
      if (((Objects.equal(chartTypes.get(type), "Pie") || Objects.equal(chartTypes.get(type), "Doughnut")) || Objects.equal(chartTypes.get(type), "BarChart"))) {
        graphGenerate.append(",backgroundColor: NAMED_COLORS");
      }
      graphGenerate.append("}]");
      graphGenerate.append("},options: {\r\n\t\t\t    scales: {\r\n\t\t\t      y: {\r\n\t\t\t        beginAtZero: true,\r\n\t\t\t        title: {\r\n                      font: {size: 20\r\n                      , family:\'Helvetica\'\r\n                      }\r\n                    \r\n\t\t\t          ,display: true, \r\n                       text:\'");
      for (int i = 0; (i < keys.size()); i++) {
        {
          graphGenerate.append(keys.get(i));
          if (((i == 0) && (keys.size() > 1))) {
            graphGenerate.append(" and ");
          }
        }
      }
      graphGenerate.append("\'}},\r\n\t\t\t      x: {\r\n\t\t\t        title: {\r\n                     font: {size: 30},\r\n\t\t\t          display: true,");
      graphGenerate.append("text:").append("\'").append(xAxis).append("\'");
      graphGenerate.append("}\r\n      }\r\n    }\r\n  }  \r\n\t\t\t  });");
      String html = "";
      if ((graphiquesNum.contains(type) && allNumeric)) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<!DOCTYPE html>");
        _builder_1.newLine();
        _builder_1.append("<head>");
        _builder_1.newLine();
        _builder_1.append("</head>");
        _builder_1.newLine();
        _builder_1.append("<body>");
        _builder_1.newLine();
        _builder_1.append("<div style=\"text-align:center;\">");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<h2>");
        _builder_1.append(title, "\t\t");
        _builder_1.append("</h2>");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("</div>");
        _builder_1.newLine();
        _builder_1.append("<div>");
        _builder_1.newLine();
        _builder_1.append("  ");
        _builder_1.append("<canvas id=\"myChart\"></canvas>");
        _builder_1.newLine();
        _builder_1.append("</div>");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>");
        _builder_1.newLine();
        _builder_1.append("<!-- <script src=\"https://raw.githubusercontent.com/chartjs/Chart.js/master/docs/scripts/utils.js\"></script> -->");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("<script>");
        _builder_1.newLine();
        _builder_1.append("Chart.defaults.color = \'#000\';");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("const CHART_COLORS = {");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("redt: \'rgba(255, 99, 132, 0.6)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("red: \'rgb(255, 99, 132)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("orange: \'rgb(255, 159, 64)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("yellow: \'rgb(255, 205, 86)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("green: \'rgb(75, 192, 192)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("bluet: \'rgba(54, 162, 235, 0.6)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("blue: \'rgb(54, 162, 235)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("purple: \'rgb(153, 102, 255)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("grey: \'rgb(201, 203, 207)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("pink: \'rgb(255, 192, 203)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("brown: \'rgb(165, 42, 42)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("gold: \'rgb(255, 215, 0)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("silver: \'rgb(192, 192, 192)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("navy: \'rgb(0, 0, 128)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("teal: \'rgb(0, 128, 128)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("black: \'rgb(0, 0, 0)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("white: \'rgb(255, 255, 255)\',");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("olive: \'rgb(128, 128, 0)\'");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("};");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("const NAMED_COLORS = [");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.red,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.orange,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.yellow,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.green,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.blue,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.purple,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.grey,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.pink,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.brown,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.gold,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.silver,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.navy,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.teal,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.black,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.white,");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("CHART_COLORS.olive");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("];");
        _builder_1.newLine();
        _builder_1.append(data);
        _builder_1.newLineIfNotEmpty();
        _builder_1.newLine();
        _builder_1.newLine();
        Object _xifexpression_1 = null;
        if (hasFilter) {
          _xifexpression_1 = dataFilter;
        } else {
          _xifexpression_1 = "";
        }
        _builder_1.append(_xifexpression_1);
        _builder_1.newLineIfNotEmpty();
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append(graphGenerate, " ");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append(" ");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.newLine();
        _builder_1.append("</script> ");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("</body>");
        _builder_1.newLine();
        html = _builder_1.toString();
      } else {
        if ((graphiquesCat.contains(type) && (!allNumeric))) {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("<!DOCTYPE html>");
          _builder_2.newLine();
          _builder_2.append("<head>");
          _builder_2.newLine();
          _builder_2.append("</head>");
          _builder_2.newLine();
          _builder_2.append("<body>");
          _builder_2.newLine();
          _builder_2.append("<div style=\"text-align:center;\">");
          _builder_2.newLine();
          _builder_2.append("\t\t");
          _builder_2.append("<h2>");
          _builder_2.append(title, "\t\t");
          _builder_2.append("</h2>");
          _builder_2.newLineIfNotEmpty();
          _builder_2.append("</div>");
          _builder_2.newLine();
          _builder_2.append("<div>");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("<canvas id=\"myChart\"></canvas>");
          _builder_2.newLine();
          _builder_2.append("</div>");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>");
          _builder_2.newLine();
          _builder_2.append("<!-- <script src=\"https://raw.githubusercontent.com/chartjs/Chart.js/master/docs/scripts/utils.js\"></script> -->");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("<script>");
          _builder_2.newLine();
          _builder_2.append("Chart.defaults.color = \'#000\';");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("const CHART_COLORS = {");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("redt: \'rgba(255, 99, 132, 0.6)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("red: \'rgb(255, 99, 132)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("orange: \'rgb(255, 159, 64)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("yellow: \'rgb(255, 205, 86)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("green: \'rgb(75, 192, 192)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("bluet: \'rgba(54, 162, 235, 0.6)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("blue: \'rgb(54, 162, 235)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("purple: \'rgb(153, 102, 255)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("grey: \'rgb(201, 203, 207)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("black: \'rgb(0, 0, 0)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("white: \'rgb(255, 255, 255)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("pink: \'rgb(255, 192, 203)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("brown: \'rgb(165, 42, 42)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("gold: \'rgb(255, 215, 0)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("silver: \'rgb(192, 192, 192)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("navy: \'rgb(0, 0, 128)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("teal: \'rgb(0, 128, 128)\',");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("olive: \'rgb(128, 128, 0)\'");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("};");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("const NAMED_COLORS = [");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.red,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.orange,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.yellow,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.green,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.blue,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.purple,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.grey,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.pink,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.brown,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.gold,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.silver,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.navy,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.teal,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.black,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.white,");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("CHART_COLORS.olive");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append("];");
          _builder_2.newLine();
          _builder_2.append(data);
          _builder_2.newLineIfNotEmpty();
          _builder_2.newLine();
          _builder_2.newLine();
          Object _xifexpression_2 = null;
          if (hasFilter) {
            _xifexpression_2 = dataFilter;
          } else {
            _xifexpression_2 = "";
          }
          _builder_2.append(_xifexpression_2);
          _builder_2.newLineIfNotEmpty();
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.append(graphGenerate, " ");
          _builder_2.newLineIfNotEmpty();
          _builder_2.append(" ");
          _builder_2.newLine();
          _builder_2.append(" ");
          _builder_2.newLine();
          _builder_2.append("</script> ");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("</body>");
          _builder_2.newLine();
          html = _builder_2.toString();
        } else {
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("<!DOCTYPE html>");
          _builder_3.newLine();
          _builder_3.append("<head>");
          _builder_3.newLine();
          _builder_3.append("</head>");
          _builder_3.newLine();
          _builder_3.append("<body >");
          _builder_3.newLine();
          _builder_3.append("<style>");
          _builder_3.newLine();
          _builder_3.append(".alert {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("background-color: #f44336;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("color: white;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("padding: 10px;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("text-align: center;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("margin-bottom: 15px;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("border-radius: 4px;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("font-size: 30px;");
          _builder_3.newLine();
          _builder_3.append("} </style>");
          _builder_3.newLine();
          _builder_3.append("<div style=\"text-align: center;font-size: 40px;  solid #8B0000;\"\">");
          _builder_3.newLine();
          _builder_3.append("\t\t");
          _builder_3.append("<h2>Attention</h2>");
          _builder_3.newLine();
          _builder_3.append("</div>");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("<div style=\"text-align:center;\"><script>");
          _builder_3.newLine();
          _builder_3.append("var errorMessage = document.createElement(\"p\");");
          _builder_3.newLine();
          _builder_3.append("errorMessage.innerHTML = \"Le graphe sélectionné ne fonctionne pas avec les données chargées. Veuillez choisir un autre graphe.\";");
          _builder_3.newLine();
          _builder_3.append("errorMessage.classList.add(\"alert\"); // Ajoute la classe \"alert\" au message d\'erreur");
          _builder_3.newLine();
          _builder_3.append("document.body.appendChild(errorMessage);");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("</script></div>");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("</body>");
          html = _builder_3.toString();
        }
      }
      fsa.generateFile("programme.html", html);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}

/*
 * generated by Xtext 2.25.0
 */
package fr.unice.cotedazur.l3ia.chart.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import tpNote.Programme
import java.io.BufferedReader
import java.io.FileReader
import java.util.ArrayList
import java.util.List
import tpNote.extractedData
import org.eclipse.emf.common.util.EList
import tpNote.Graph
import java.util.HashMap
import java.util.Map
import javax.sound.sampled.BooleanControl.Type

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
    
    

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		var Programme program = resource.allContents.head as Programme
		var String path = program.input.path
		var String delimiteur = program.input.delimiter

    
        
		// read csv file		
		var List<String> fileContent = new ArrayList();
		try (var BufferedReader br = new BufferedReader(new FileReader(path))) {
		    var String line = br.readLine()
//		    var int size = line.split(delimiteur).size()
		    while ( line !== null ) {
//		    	var String[] splitLine = line.split(delimiteur)
//		    	var int hasEmptyString = 0
//		    	if (splitLine.size() > 0) {
//		    		for (String str: splitLine){
//		    		if (str.isEmpty()){
//		    			hasEmptyString += 1 
//		    			}
//			    	}
//			    	if (hasEmptyString === 0 ){
//			    		fileContent.add(line);
//			    	}
//		    	}
		    	fileContent.add(line);
		    	line = br.readLine()
		    	
		    }
		}
		
		var EList<extractedData> keep = program.input.keep
		var data = new StringBuilder()
		data.append("const data = [\n")   
		
		var String test  = ""
		var List<String> colTypes = fileContent.get(1).split(delimiteur)
		var int size = colTypes.size()
		for (var int i = 2; i < fileContent.size(); i++ ){
			var line = fileContent.get(i).split(delimiteur)
			if (line.size() === size){
				var jsonLine = new StringBuilder('{ ')
				
				var int hasEmptyString = 0
				
				for (var int j = 0; j < keep.size(); j++){
					var index = keep.get(j).index
					var colName = keep.get(j).name
					jsonLine.append(colName)
					jsonLine.append(": ")
					if (line.get(index).isEmpty()){
						hasEmptyString +=1
					}
					if (colTypes.get(index).equals("String") || colTypes.get(index).equals("STRING") || colTypes.get(index).equals("string")){
						jsonLine.append("\"")
						jsonLine.append(line.get(index))
						jsonLine.append("\"")
					}else{
						jsonLine.append(line.get(index))
					}
					if (j !== keep.size() - 1){
						jsonLine.append(" , ")
					}
					
				} 
				jsonLine.append("}")
				
				// verifier s'il y a une chaine vide
				if (hasEmptyString === 0){
					data.append(jsonLine)
					if (i !== fileContent.size() - 1){
							data.append(" , ")
					}
					data.append("\n")
				}
				
			}
		} 
		data.append("]")
		
		
		var Map<String, String> chartTypes = new HashMap<String, String>()
		
		chartTypes.put("BarChart", "bar")
		chartTypes.put("AreaChart", "area")
		chartTypes.put("BubbleChart", "bubble")
		chartTypes.put("LineChart", "line")
		chartTypes.put("ScatterChart", "scatter")
		chartTypes.put("MixedChartTypes", "mixed")
		chartTypes.put("RadarChart", "radar")
		chartTypes.put("Pie", "pie")
		chartTypes.put("Doughnut", "doughnut")
		
		var List<String> keys = new ArrayList()
		var EList<Graph> graphes = program.output.graph
		var graph = graphes.get(0)
		var String type = graph.type.getName()
		var title = graph.title
		var xAxis = graph.XAxis.name
		var EList<extractedData> yAxis = graph.YAxis
		for (extractedData e: yAxis){
			keys.add(e.name)
		}
		var graphGenerate = new StringBuilder()
		graphGenerate.append("\n new Chart( \n")
		graphGenerate.append("document.getElementById('myChart'),")
		graphGenerate.append("{\n")
		graphGenerate.append("type : ")
		graphGenerate.append("'").append(chartTypes.get(type)).append("'")
		graphGenerate.append(", \n")
		graphGenerate.append("data: { \n labels : ")
		graphGenerate.append("data.map(row => row.")
		graphGenerate.append(xAxis)
		graphGenerate.append("), \n")
		graphGenerate.append("datasets: [")
		
		
		for (var int i = 0; i < keys.size(); i++){
			var row = new StringBuilder("{ \n")	
			row.append("label : ")
			row.append("'").append(keys.get(i)).append("'")
			row.append(", \n")
			row.append("data: ").append("data.map(row => row.").append(keys.get(i))
			row.append(" )")
			row.append("} \n") 
			if (i !== keys.size() - 1){
				row.append(", \n")
			}
			graphGenerate.append(row) 
		}
		graphGenerate.append("]")
		graphGenerate.append("}
			    }
			  );
			")
			
			
		var html = '''
		<!DOCTYPE html>
		<head>
		</head>
		<body>
		<div>
		  <canvas id="myChart"></canvas>
		</div>
		
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<!-- <script src="https://raw.githubusercontent.com/chartjs/Chart.js/master/docs/scripts/utils.js"></script> -->
		
		<script>
		
		
		 const CHART_COLORS = {
		 redt: 'rgba(255, 99, 132, 0.6)',
		 red: 'rgb(255, 99, 132)',
		 orange: 'rgb(255, 159, 64)',
		 yellow: 'rgb(255, 205, 86)',
		 green: 'rgb(75, 192, 192)',
		 bluet: 'rgba(54, 162, 235, 0.6)',
		 blue: 'rgb(54, 162, 235)',
		 purple: 'rgb(153, 102, 255)',
		 grey: 'rgb(201, 203, 207)',
		 black: 'rgb(0, 0, 0)',
		 white: 'rgb(255, 255, 255)',
		 pink: 'rgb(255, 192, 203)',
		 brown: 'rgb(165, 42, 42)',
		 gold: 'rgb(255, 215, 0)',
		 silver: 'rgb(192, 192, 192)',
		 navy: 'rgb(0, 0, 128)',
		 teal: 'rgb(0, 128, 128)',
		 olive: 'rgb(128, 128, 0)'
		 };
		 
		 const NAMED_COLORS = [
		 CHART_COLORS.red,
		 CHART_COLORS.orange,
		 CHART_COLORS.yellow,
		 CHART_COLORS.green,
		 CHART_COLORS.blue,
		 CHART_COLORS.purple,
		 CHART_COLORS.grey,
		 CHART_COLORS.black,
		 CHART_COLORS.white,
		 CHART_COLORS.pink,
		 CHART_COLORS.brown,
		 CHART_COLORS.gold,
		 CHART_COLORS.silver,
		 CHART_COLORS.navy,
		 CHART_COLORS.teal,
		 CHART_COLORS.olive
		 ];
		'''
		+ data + 
		graphGenerate+
		'''
		</script> 
		
		</body>
		'''
		fsa.generateFile('programme.html', data)  

	}
}

/*
 * generated by Xtext 2.25.0
 */
package fr.unice.cotedazur.l3ia.chart.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgrammeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.Programme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgrammeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputFileParserRuleCall_2_0 = (RuleCall)cInputAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhereKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFilterconditionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFilterconditionFilterConditionParserRuleCall_3_2_0 = (RuleCall)cFilterconditionAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cFilterconditionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cFilterconditionFilterConditionParserRuleCall_3_3_1_0 = (RuleCall)cFilterconditionAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputHTMLFileParserRuleCall_4_0 = (RuleCall)cOutputAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Programme returns Programme:
		//    'Programme'
		//    '{'
		//         input=File
		//        ('where' '(' filtercondition+=filterCondition ( "," filtercondition+=filterCondition)* ')' )?
		//         output=HTMLFile
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Programme'
		//'{'
		//     input=File
		//    ('where' '(' filtercondition+=filterCondition ( "," filtercondition+=filterCondition)* ')' )?
		//     output=HTMLFile
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Programme'
		public Keyword getProgrammeKeyword_0() { return cProgrammeKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//input=File
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }
		
		//File
		public RuleCall getInputFileParserRuleCall_2_0() { return cInputFileParserRuleCall_2_0; }
		
		//('where' '(' filtercondition+=filterCondition ( "," filtercondition+=filterCondition)* ')' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'where'
		public Keyword getWhereKeyword_3_0() { return cWhereKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//filtercondition+=filterCondition
		public Assignment getFilterconditionAssignment_3_2() { return cFilterconditionAssignment_3_2; }
		
		//filterCondition
		public RuleCall getFilterconditionFilterConditionParserRuleCall_3_2_0() { return cFilterconditionFilterConditionParserRuleCall_3_2_0; }
		
		//( "," filtercondition+=filterCondition)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//filtercondition+=filterCondition
		public Assignment getFilterconditionAssignment_3_3_1() { return cFilterconditionAssignment_3_3_1; }
		
		//filterCondition
		public RuleCall getFilterconditionFilterConditionParserRuleCall_3_3_1_0() { return cFilterconditionFilterConditionParserRuleCall_3_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//output=HTMLFile
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }
		
		//HTMLFile
		public RuleCall getOutputHTMLFileParserRuleCall_4_0() { return cOutputHTMLFileParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FilterConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.filterCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryBooleanExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//filterCondition returns filterCondition:
		//    Constant | BinaryBooleanExp | colRef;
		@Override public ParserRule getRule() { return rule; }
		
		//Constant | BinaryBooleanExp | colRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//BinaryBooleanExp
		public RuleCall getBinaryBooleanExpParserRuleCall_1() { return cBinaryBooleanExpParserRuleCall_1; }
		
		//colRef
		public RuleCall getColRefParserRuleCall_2() { return cColRefParserRuleCall_2; }
	}
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPathKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPathAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPathEStringParserRuleCall_0_1_0 = (RuleCall)cPathAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDelimiterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDelimiterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDelimiterEStringParserRuleCall_1_1_0 = (RuleCall)cDelimiterAssignment_1_1.eContents().get(0);
		private final Keyword cKeepKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeepAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeepExtractedDataParserRuleCall_3_0 = (RuleCall)cKeepAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cKeepAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cKeepExtractedDataParserRuleCall_4_1_0 = (RuleCall)cKeepAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//File returns File:
		//        ('path=' path=EString)?
		//        ('delimiter=' delimiter=EString)?
		//        'keep('  keep+=extractedData ( "," keep+=extractedData)* ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//('path=' path=EString)?
		//('delimiter=' delimiter=EString)?
		//'keep('  keep+=extractedData ( "," keep+=extractedData)* ')'
		public Group getGroup() { return cGroup; }
		
		//('path=' path=EString)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'path='
		public Keyword getPathKeyword_0_0() { return cPathKeyword_0_0; }
		
		//path=EString
		public Assignment getPathAssignment_0_1() { return cPathAssignment_0_1; }
		
		//EString
		public RuleCall getPathEStringParserRuleCall_0_1_0() { return cPathEStringParserRuleCall_0_1_0; }
		
		//('delimiter=' delimiter=EString)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'delimiter='
		public Keyword getDelimiterKeyword_1_0() { return cDelimiterKeyword_1_0; }
		
		//delimiter=EString
		public Assignment getDelimiterAssignment_1_1() { return cDelimiterAssignment_1_1; }
		
		//EString
		public RuleCall getDelimiterEStringParserRuleCall_1_1_0() { return cDelimiterEStringParserRuleCall_1_1_0; }
		
		//'keep('
		public Keyword getKeepKeyword_2() { return cKeepKeyword_2; }
		
		//keep+=extractedData
		public Assignment getKeepAssignment_3() { return cKeepAssignment_3; }
		
		//extractedData
		public RuleCall getKeepExtractedDataParserRuleCall_3_0() { return cKeepExtractedDataParserRuleCall_3_0; }
		
		//( "," keep+=extractedData)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//keep+=extractedData
		public Assignment getKeepAssignment_4_1() { return cKeepAssignment_4_1; }
		
		//extractedData
		public RuleCall getKeepExtractedDataParserRuleCall_4_1_0() { return cKeepExtractedDataParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class HTMLFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.HTMLFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGraphAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGraphGraphParserRuleCall_0_0 = (RuleCall)cGraphAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGraphAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGraphGraphParserRuleCall_1_1_0 = (RuleCall)cGraphAssignment_1_1.eContents().get(0);
		
		//HTMLFile returns HTMLFile:
		//          graph+=Graph ( "," graph+=Graph)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//graph+=Graph ( "," graph+=Graph)*
		public Group getGroup() { return cGroup; }
		
		//graph+=Graph
		public Assignment getGraphAssignment_0() { return cGraphAssignment_0; }
		
		//Graph
		public RuleCall getGraphGraphParserRuleCall_0_0() { return cGraphGraphParserRuleCall_0_0; }
		
		//( "," graph+=Graph)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//graph+=Graph
		public Assignment getGraphAssignment_1_1() { return cGraphAssignment_1_1; }
		
		//Graph
		public RuleCall getGraphGraphParserRuleCall_1_1_0() { return cGraphGraphParserRuleCall_1_1_0; }
	}
	public class ExtractedDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.extractedData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtractedDataAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeDataAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeDataTypeDonneesEnumRuleCall_3_1_0 = (RuleCall)cTypeDataAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIndexKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIndexAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIndexEIntParserRuleCall_4_1_0 = (RuleCall)cIndexAssignment_4_1.eContents().get(0);
		
		//extractedData returns extractedData:
		//    {extractedData}
		//    'colName='name=EString
		//        (':' typeData=typeDonnees)?
		//        ('index=' index=EInt)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{extractedData}
		//'colName='name=EString
		//    (':' typeData=typeDonnees)?
		//    ('index=' index=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{extractedData}
		public Action getExtractedDataAction_0() { return cExtractedDataAction_0; }
		
		//'colName='
		public Keyword getColNameKeyword_1() { return cColNameKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//(':' typeData=typeDonnees)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//typeData=typeDonnees
		public Assignment getTypeDataAssignment_3_1() { return cTypeDataAssignment_3_1; }
		
		//typeDonnees
		public RuleCall getTypeDataTypeDonneesEnumRuleCall_3_1_0() { return cTypeDataTypeDonneesEnumRuleCall_3_1_0; }
		
		//('index=' index=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'index='
		public Keyword getIndexKeyword_4_0() { return cIndexKeyword_4_0; }
		
		//index=EInt
		public Assignment getIndexAssignment_4_1() { return cIndexAssignment_4_1; }
		
		//EInt
		public RuleCall getIndexEIntParserRuleCall_4_1_0() { return cIndexEIntParserRuleCall_4_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeGraphEnumRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTitleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTitleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_1_1_0 = (RuleCall)cTitleAssignment_1_1.eContents().get(0);
		private final Keyword cXAxisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAxisAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cXAxisExtractedDataCrossReference_3_0 = (CrossReference)cXAxisAssignment_3.eContents().get(0);
		private final RuleCall cXAxisExtractedDataEStringParserRuleCall_3_0_1 = (RuleCall)cXAxisExtractedDataCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cYAxisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cYAxisAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cYAxisExtractedDataCrossReference_4_1_0 = (CrossReference)cYAxisAssignment_4_1.eContents().get(0);
		private final RuleCall cYAxisExtractedDataEStringParserRuleCall_4_1_0_1 = (RuleCall)cYAxisExtractedDataCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cYAxisKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cYAxisAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cYAxisExtractedDataCrossReference_4_2_1_0 = (CrossReference)cYAxisAssignment_4_2_1.eContents().get(0);
		private final RuleCall cYAxisExtractedDataEStringParserRuleCall_4_2_1_0_1 = (RuleCall)cYAxisExtractedDataCrossReference_4_2_1_0.eContents().get(1);
		
		//Graph returns Graph:
		//        ('type =' type=typeGraph)?
		//        ('title =' title=EString)?
		//        'xAxis =' xAxis=[extractedData|EString]
		//        ('yAxis =' yAxis+=[extractedData|EString] ( "yAxis =" yAxis+=[extractedData|EString])*)?
		//        //'yAxis =' ( "yAxis=" yAxis+=[extractedData|EString])*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//('type =' type=typeGraph)?
		//('title =' title=EString)?
		//'xAxis =' xAxis=[extractedData|EString]
		//('yAxis =' yAxis+=[extractedData|EString] ( "yAxis =" yAxis+=[extractedData|EString])*)?
		public Group getGroup() { return cGroup; }
		
		//('type =' type=typeGraph)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'type ='
		public Keyword getTypeKeyword_0_0() { return cTypeKeyword_0_0; }
		
		//type=typeGraph
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//typeGraph
		public RuleCall getTypeTypeGraphEnumRuleCall_0_1_0() { return cTypeTypeGraphEnumRuleCall_0_1_0; }
		
		//('title =' title=EString)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'title ='
		public Keyword getTitleKeyword_1_0() { return cTitleKeyword_1_0; }
		
		//title=EString
		public Assignment getTitleAssignment_1_1() { return cTitleAssignment_1_1; }
		
		//EString
		public RuleCall getTitleEStringParserRuleCall_1_1_0() { return cTitleEStringParserRuleCall_1_1_0; }
		
		//'xAxis ='
		public Keyword getXAxisKeyword_2() { return cXAxisKeyword_2; }
		
		//xAxis=[extractedData|EString]
		public Assignment getXAxisAssignment_3() { return cXAxisAssignment_3; }
		
		//[extractedData|EString]
		public CrossReference getXAxisExtractedDataCrossReference_3_0() { return cXAxisExtractedDataCrossReference_3_0; }
		
		//EString
		public RuleCall getXAxisExtractedDataEStringParserRuleCall_3_0_1() { return cXAxisExtractedDataEStringParserRuleCall_3_0_1; }
		
		//('yAxis =' yAxis+=[extractedData|EString] ( "yAxis =" yAxis+=[extractedData|EString])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'yAxis ='
		public Keyword getYAxisKeyword_4_0() { return cYAxisKeyword_4_0; }
		
		//yAxis+=[extractedData|EString]
		public Assignment getYAxisAssignment_4_1() { return cYAxisAssignment_4_1; }
		
		//[extractedData|EString]
		public CrossReference getYAxisExtractedDataCrossReference_4_1_0() { return cYAxisExtractedDataCrossReference_4_1_0; }
		
		//EString
		public RuleCall getYAxisExtractedDataEStringParserRuleCall_4_1_0_1() { return cYAxisExtractedDataEStringParserRuleCall_4_1_0_1; }
		
		//( "yAxis =" yAxis+=[extractedData|EString])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//"yAxis ="
		public Keyword getYAxisKeyword_4_2_0() { return cYAxisKeyword_4_2_0; }
		
		//yAxis+=[extractedData|EString]
		public Assignment getYAxisAssignment_4_2_1() { return cYAxisAssignment_4_2_1; }
		
		//[extractedData|EString]
		public CrossReference getYAxisExtractedDataCrossReference_4_2_1_0() { return cYAxisExtractedDataCrossReference_4_2_1_0; }
		
		//EString
		public RuleCall getYAxisExtractedDataEStringParserRuleCall_4_2_1_0_1() { return cYAxisExtractedDataEStringParserRuleCall_4_2_1_0_1; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeDonneesEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//Constant returns Constant:
		//    {Constant}
		//    'Const'
		//    ( type=typeDonnees)?
		//    ('=' value=EString)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Constant}
		//'Const'
		//( type=typeDonnees)?
		//('=' value=EString)?
		public Group getGroup() { return cGroup; }
		
		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }
		
		//'Const'
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }
		
		//( type=typeDonnees)?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//typeDonnees
		public RuleCall getTypeTypeDonneesEnumRuleCall_2_0() { return cTypeTypeDonneesEnumRuleCall_2_0; }
		
		//('=' value=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//value=EString
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_1_0() { return cValueEStringParserRuleCall_3_1_0; }
	}
	public class BinaryBooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.BinaryBooleanExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsFilterConditionParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorComOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsFilterConditionParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BinaryBooleanExp returns BinaryBooleanExp:
		//        '('lhs=filterCondition
		//        ( operator=comOperator)
		//        rhs=filterCondition')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'('lhs=filterCondition
		//( operator=comOperator)
		//rhs=filterCondition')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//lhs=filterCondition
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }
		
		//filterCondition
		public RuleCall getLhsFilterConditionParserRuleCall_1_0() { return cLhsFilterConditionParserRuleCall_1_0; }
		
		//( operator=comOperator)
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//comOperator
		public RuleCall getOperatorComOperatorEnumRuleCall_2_0() { return cOperatorComOperatorEnumRuleCall_2_0; }
		
		//rhs=filterCondition
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }
		
		//filterCondition
		public RuleCall getRhsFilterConditionParserRuleCall_3_0() { return cRhsFilterConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ColRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.colRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExtracteddataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExtracteddataExtractedDataCrossReference_1_0 = (CrossReference)cExtracteddataAssignment_1.eContents().get(0);
		private final RuleCall cExtracteddataExtractedDataEStringParserRuleCall_1_0_1 = (RuleCall)cExtracteddataExtractedDataCrossReference_1_0.eContents().get(1);
		
		//colRef returns colRef:
		//    {colRef}
		//        (extracteddata=[extractedData|EString])?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{colRef}
		//    (extracteddata=[extractedData|EString])?
		public Group getGroup() { return cGroup; }
		
		//{colRef}
		public Action getColRefAction_0() { return cColRefAction_0; }
		
		//(extracteddata=[extractedData|EString])?
		public Assignment getExtracteddataAssignment_1() { return cExtracteddataAssignment_1; }
		
		//[extractedData|EString]
		public CrossReference getExtracteddataExtractedDataCrossReference_1_0() { return cExtracteddataExtractedDataCrossReference_1_0; }
		
		//EString
		public RuleCall getExtracteddataExtractedDataEStringParserRuleCall_1_0_1() { return cExtracteddataExtractedDataEStringParserRuleCall_1_0_1; }
	}
	
	public class TypeDonneesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.typeDonnees");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringStringKeyword_1_0 = (Keyword)cStringEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFloatFloatKeyword_2_0 = (Keyword)cFloatEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateDateKeyword_3_0 = (Keyword)cDateEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum typeDonnees returns typeDonnees:
		//                int = 'int' | string = 'string' | float = 'float' | Date = 'Date';
		public EnumRule getRule() { return rule; }
		
		//int = 'int' | string = 'string' | float = 'float' | Date = 'Date'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int = 'int'
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }
		
		//'int'
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }
		
		//string = 'string'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_1() { return cStringEnumLiteralDeclaration_1; }
		
		//'string'
		public Keyword getStringStringKeyword_1_0() { return cStringStringKeyword_1_0; }
		
		//float = 'float'
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_2() { return cFloatEnumLiteralDeclaration_2; }
		
		//'float'
		public Keyword getFloatFloatKeyword_2_0() { return cFloatFloatKeyword_2_0; }
		
		//Date = 'Date'
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_3() { return cDateEnumLiteralDeclaration_3; }
		
		//'Date'
		public Keyword getDateDateKeyword_3_0() { return cDateDateKeyword_3_0; }
	}
	public class TypeGraphElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.typeGraph");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBarChartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBarChartBarChartKeyword_0_0 = (Keyword)cBarChartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAreaChartEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAreaChartAreaChartKeyword_1_0 = (Keyword)cAreaChartEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBubbleChartEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBubbleChartBubbleChartKeyword_2_0 = (Keyword)cBubbleChartEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLineChartEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLineChartLineChartKeyword_3_0 = (Keyword)cLineChartEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cScatterChartEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cScatterChartScatterChartKeyword_4_0 = (Keyword)cScatterChartEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRadarChartEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRadarChartRadarChartKeyword_5_0 = (Keyword)cRadarChartEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cMixedChartTypesEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cMixedChartTypesMixedChartTypesKeyword_6_0 = (Keyword)cMixedChartTypesEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPolarAreaChartEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPolarAreaChartPolarAreaChartKeyword_7_0 = (Keyword)cPolarAreaChartEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cPieEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cPiePieKeyword_8_0 = (Keyword)cPieEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDoughnutEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDoughnutDoughnutKeyword_9_0 = (Keyword)cDoughnutEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum typeGraph returns typeGraph:
		//                BarChart = 'BarChart' | AreaChart = 'AreaChart' | BubbleChart = 'BubbleChart' | LineChart = 'LineChart' | ScatterChart = 'ScatterChart' | RadarChart = 'RadarChart' | MixedChartTypes = 'MixedChartTypes' | PolarAreaChart = 'PolarAreaChart' | Pie = 'Pie' | Doughnut = 'Doughnut';
		public EnumRule getRule() { return rule; }
		
		//BarChart = 'BarChart' | AreaChart = 'AreaChart' | BubbleChart = 'BubbleChart' | LineChart = 'LineChart' | ScatterChart = 'ScatterChart' | RadarChart = 'RadarChart' | MixedChartTypes = 'MixedChartTypes' | PolarAreaChart = 'PolarAreaChart' | Pie = 'Pie' | Doughnut = 'Doughnut'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BarChart = 'BarChart'
		public EnumLiteralDeclaration getBarChartEnumLiteralDeclaration_0() { return cBarChartEnumLiteralDeclaration_0; }
		
		//'BarChart'
		public Keyword getBarChartBarChartKeyword_0_0() { return cBarChartBarChartKeyword_0_0; }
		
		//AreaChart = 'AreaChart'
		public EnumLiteralDeclaration getAreaChartEnumLiteralDeclaration_1() { return cAreaChartEnumLiteralDeclaration_1; }
		
		//'AreaChart'
		public Keyword getAreaChartAreaChartKeyword_1_0() { return cAreaChartAreaChartKeyword_1_0; }
		
		//BubbleChart = 'BubbleChart'
		public EnumLiteralDeclaration getBubbleChartEnumLiteralDeclaration_2() { return cBubbleChartEnumLiteralDeclaration_2; }
		
		//'BubbleChart'
		public Keyword getBubbleChartBubbleChartKeyword_2_0() { return cBubbleChartBubbleChartKeyword_2_0; }
		
		//LineChart = 'LineChart'
		public EnumLiteralDeclaration getLineChartEnumLiteralDeclaration_3() { return cLineChartEnumLiteralDeclaration_3; }
		
		//'LineChart'
		public Keyword getLineChartLineChartKeyword_3_0() { return cLineChartLineChartKeyword_3_0; }
		
		//ScatterChart = 'ScatterChart'
		public EnumLiteralDeclaration getScatterChartEnumLiteralDeclaration_4() { return cScatterChartEnumLiteralDeclaration_4; }
		
		//'ScatterChart'
		public Keyword getScatterChartScatterChartKeyword_4_0() { return cScatterChartScatterChartKeyword_4_0; }
		
		//RadarChart = 'RadarChart'
		public EnumLiteralDeclaration getRadarChartEnumLiteralDeclaration_5() { return cRadarChartEnumLiteralDeclaration_5; }
		
		//'RadarChart'
		public Keyword getRadarChartRadarChartKeyword_5_0() { return cRadarChartRadarChartKeyword_5_0; }
		
		//MixedChartTypes = 'MixedChartTypes'
		public EnumLiteralDeclaration getMixedChartTypesEnumLiteralDeclaration_6() { return cMixedChartTypesEnumLiteralDeclaration_6; }
		
		//'MixedChartTypes'
		public Keyword getMixedChartTypesMixedChartTypesKeyword_6_0() { return cMixedChartTypesMixedChartTypesKeyword_6_0; }
		
		//PolarAreaChart = 'PolarAreaChart'
		public EnumLiteralDeclaration getPolarAreaChartEnumLiteralDeclaration_7() { return cPolarAreaChartEnumLiteralDeclaration_7; }
		
		//'PolarAreaChart'
		public Keyword getPolarAreaChartPolarAreaChartKeyword_7_0() { return cPolarAreaChartPolarAreaChartKeyword_7_0; }
		
		//Pie = 'Pie'
		public EnumLiteralDeclaration getPieEnumLiteralDeclaration_8() { return cPieEnumLiteralDeclaration_8; }
		
		//'Pie'
		public Keyword getPiePieKeyword_8_0() { return cPiePieKeyword_8_0; }
		
		//Doughnut = 'Doughnut'
		public EnumLiteralDeclaration getDoughnutEnumLiteralDeclaration_9() { return cDoughnutEnumLiteralDeclaration_9; }
		
		//'Doughnut'
		public Keyword getDoughnutDoughnutKeyword_9_0() { return cDoughnutDoughnutKeyword_9_0; }
	}
	public class ComOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia.chart.MyDsl.comOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInfEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInfLessThanSignKeyword_0_0 = (Keyword)cInfEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSupEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSupGreaterThanSignKeyword_1_0 = (Keyword)cSupEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum comOperator returns comOperator:
		//                inf = '<' | sup = '>' | equal = '==';
		public EnumRule getRule() { return rule; }
		
		//inf = '<' | sup = '>' | equal = '=='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//inf = '<'
		public EnumLiteralDeclaration getInfEnumLiteralDeclaration_0() { return cInfEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getInfLessThanSignKeyword_0_0() { return cInfLessThanSignKeyword_0_0; }
		
		//sup = '>'
		public EnumLiteralDeclaration getSupEnumLiteralDeclaration_1() { return cSupEnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getSupGreaterThanSignKeyword_1_0() { return cSupGreaterThanSignKeyword_1_0; }
		
		//equal = '=='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//'=='
		public Keyword getEqualEqualsSignEqualsSignKeyword_2_0() { return cEqualEqualsSignEqualsSignKeyword_2_0; }
	}
	
	private final ProgrammeElements pProgramme;
	private final FilterConditionElements pFilterCondition;
	private final FileElements pFile;
	private final HTMLFileElements pHTMLFile;
	private final ExtractedDataElements pExtractedData;
	private final EStringElements pEString;
	private final TypeDonneesElements eTypeDonnees;
	private final EIntElements pEInt;
	private final GraphElements pGraph;
	private final TypeGraphElements eTypeGraph;
	private final ConstantElements pConstant;
	private final BinaryBooleanExpElements pBinaryBooleanExp;
	private final ColRefElements pColRef;
	private final ComOperatorElements eComOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgramme = new ProgrammeElements();
		this.pFilterCondition = new FilterConditionElements();
		this.pFile = new FileElements();
		this.pHTMLFile = new HTMLFileElements();
		this.pExtractedData = new ExtractedDataElements();
		this.pEString = new EStringElements();
		this.eTypeDonnees = new TypeDonneesElements();
		this.pEInt = new EIntElements();
		this.pGraph = new GraphElements();
		this.eTypeGraph = new TypeGraphElements();
		this.pConstant = new ConstantElements();
		this.pBinaryBooleanExp = new BinaryBooleanExpElements();
		this.pColRef = new ColRefElements();
		this.eComOperator = new ComOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.unice.cotedazur.l3ia.chart.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programme returns Programme:
	//    'Programme'
	//    '{'
	//         input=File
	//        ('where' '(' filtercondition+=filterCondition ( "," filtercondition+=filterCondition)* ')' )?
	//         output=HTMLFile
	//    '}';
	public ProgrammeElements getProgrammeAccess() {
		return pProgramme;
	}
	
	public ParserRule getProgrammeRule() {
		return getProgrammeAccess().getRule();
	}
	
	//filterCondition returns filterCondition:
	//    Constant | BinaryBooleanExp | colRef;
	public FilterConditionElements getFilterConditionAccess() {
		return pFilterCondition;
	}
	
	public ParserRule getFilterConditionRule() {
		return getFilterConditionAccess().getRule();
	}
	
	//File returns File:
	//        ('path=' path=EString)?
	//        ('delimiter=' delimiter=EString)?
	//        'keep('  keep+=extractedData ( "," keep+=extractedData)* ')'
	//    ;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//HTMLFile returns HTMLFile:
	//          graph+=Graph ( "," graph+=Graph)*
	//    ;
	public HTMLFileElements getHTMLFileAccess() {
		return pHTMLFile;
	}
	
	public ParserRule getHTMLFileRule() {
		return getHTMLFileAccess().getRule();
	}
	
	//extractedData returns extractedData:
	//    {extractedData}
	//    'colName='name=EString
	//        (':' typeData=typeDonnees)?
	//        ('index=' index=EInt)?
	//    ;
	public ExtractedDataElements getExtractedDataAccess() {
		return pExtractedData;
	}
	
	public ParserRule getExtractedDataRule() {
		return getExtractedDataAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum typeDonnees returns typeDonnees:
	//                int = 'int' | string = 'string' | float = 'float' | Date = 'Date';
	public TypeDonneesElements getTypeDonneesAccess() {
		return eTypeDonnees;
	}
	
	public EnumRule getTypeDonneesRule() {
		return getTypeDonneesAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Graph returns Graph:
	//        ('type =' type=typeGraph)?
	//        ('title =' title=EString)?
	//        'xAxis =' xAxis=[extractedData|EString]
	//        ('yAxis =' yAxis+=[extractedData|EString] ( "yAxis =" yAxis+=[extractedData|EString])*)?
	//        //'yAxis =' ( "yAxis=" yAxis+=[extractedData|EString])*
	//    ;
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	//enum typeGraph returns typeGraph:
	//                BarChart = 'BarChart' | AreaChart = 'AreaChart' | BubbleChart = 'BubbleChart' | LineChart = 'LineChart' | ScatterChart = 'ScatterChart' | RadarChart = 'RadarChart' | MixedChartTypes = 'MixedChartTypes' | PolarAreaChart = 'PolarAreaChart' | Pie = 'Pie' | Doughnut = 'Doughnut';
	public TypeGraphElements getTypeGraphAccess() {
		return eTypeGraph;
	}
	
	public EnumRule getTypeGraphRule() {
		return getTypeGraphAccess().getRule();
	}
	
	//Constant returns Constant:
	//    {Constant}
	//    'Const'
	//    ( type=typeDonnees)?
	//    ('=' value=EString)?
	//    ;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//BinaryBooleanExp returns BinaryBooleanExp:
	//        '('lhs=filterCondition
	//        ( operator=comOperator)
	//        rhs=filterCondition')'
	//    ;
	public BinaryBooleanExpElements getBinaryBooleanExpAccess() {
		return pBinaryBooleanExp;
	}
	
	public ParserRule getBinaryBooleanExpRule() {
		return getBinaryBooleanExpAccess().getRule();
	}
	
	//colRef returns colRef:
	//    {colRef}
	//        (extracteddata=[extractedData|EString])?
	//    ;
	public ColRefElements getColRefAccess() {
		return pColRef;
	}
	
	public ParserRule getColRefRule() {
		return getColRefAccess().getRule();
	}
	
	//enum comOperator returns comOperator:
	//                inf = '<' | sup = '>' | equal = '==';
	public ComOperatorElements getComOperatorAccess() {
		return eComOperator;
	}
	
	public EnumRule getComOperatorRule() {
		return getComOperatorAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
